{"version":3,"sources":["components/location-details.js","components/forecast-summary.js","components/forecast-summaries.js","components/forecast-details.js","components/search-form.js","components/App.js","index.js"],"names":["LocationDetails","props","className","city","country","ForecastSummary","date","temperature","description","icon","onSelect","data-testid","moment","format","name","iconId","onClick","ForecastSummaries","forecasts","map","forecast","max","onForecastSelect","ForecastDetails","min","humidity","wind","speed","direction","toUpperCase","SearchForm","useState","searchText","setSearchText","handleSearchText","errorMessage","id","type","placeholder","onChange","event","target","value","handleInputChange","onKeyUp","key","document","getElementById","App","setForecasts","location","setLocation","selectedDate","setSelectedDate","setErrorMessage","getForecasts","a","axios","get","then","res","status","data","catch","error","response","useEffect","selectedForecast","find","ReactDOM","render"],"mappings":"sWAeeA,G,MAXS,SAAAC,GACtB,OAAO,qBAAIC,UAAU,mBAAd,UACJD,EAAME,KADF,KACUF,EAAMG,a,iCCoCVC,G,MApCS,SAAC,GAMlB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,KACAC,EACI,EADJA,SAEA,OACE,sBAAKR,UAAU,mBAAf,UACE,sBAAMA,UAAU,OAAOS,cAAY,UAAnC,SACGC,IAAON,GAAMO,OAAO,gBAEvB,uBAAMX,UAAU,cAAcS,cAAY,iBAA1C,UACGJ,EADH,WAGA,sBAAML,UAAU,cAAcS,cAAY,iBAA1C,SACGH,IAEH,sBAAMN,UAAU,OAAOS,cAAY,UAAnC,SACE,cAAC,IAAD,CAAaG,KAAK,MAAMC,OAAQN,EAAME,cAAY,sBAEpD,wBAAQT,UAAU,iBAAiBc,QAAS,kBAAMN,EAASJ,IAA3D,+BCQSW,G,MA9BW,SAAAhB,GAAK,OAC7B,qBAAKC,UAAU,qBAAf,SAEID,EAAMiB,UAAUC,KAAI,SAAAC,GAAQ,OAC1B,cAAC,EAAD,CAEEd,KAAMc,EAASd,KACfE,YAAaY,EAASZ,YACtBC,KAAMW,EAASX,KACfF,YAAaa,EAASb,YAAYc,IAClCX,SAAUT,EAAMqB,kBALXF,EAASd,aC+BTiB,G,MApCS,SAAC,GAAkB,IAAhBH,EAAe,EAAfA,SACzB,OAAO,sBAAKlB,UAAU,mBAAf,UACL,sBAAMA,UAAU,OAAOS,cAAY,UAAnC,SACGC,IAAOQ,EAASd,MAAMO,OAAO,gBAEhC,uBAAMX,UAAU,kBAAkBS,cAAY,qBAA9C,uBACaS,EAASb,YAAYiB,IADlC,WAGA,uBAAMtB,UAAU,kBAAkBS,cAAY,qBAA9C,uBACaS,EAASb,YAAYc,IADlC,WAGA,uBAAMnB,UAAU,WAAWS,cAAY,cAAvC,uBACaS,EAASK,SADtB,OAGA,uBAAMvB,UAAU,aAAaS,cAAY,gBAAzC,yBACeS,EAASM,KAAKC,MAD7B,SAGA,uBAAMzB,UAAU,iBAAiBS,cAAY,oBAA7C,6BACmBS,EAASM,KAAKE,UAAUC,sBCmBhCC,G,MAvCI,SAAC7B,GAAW,IAAD,EACQ8B,mBAAS,IADjB,mBACrBC,EADqB,KACTC,EADS,KAKrBC,EAAkCjC,EAAlCiC,iBAAkBC,EAAgBlC,EAAhBkC,aAEzB,OAAO,sBAAKjC,UAAU,cAAf,UACL,sBAAKkC,GAAG,uBAAR,UACE,uBACElC,UAAU,eACVkC,GAAG,wBACHC,KAAK,SACLC,YAAY,cACZC,SAAU,SAACC,IAZS,SAACA,GACzBP,EAAcO,EAAMC,OAAOC,OAYrBC,CAAkBH,IAEpBI,QAAS,SAACJ,GACU,UAAdA,EAAMK,MACRX,EAAiBF,GACjBc,SAASC,eAAe,yBAAyBL,MAAQ,OAM/D,wBACExC,UAAU,gBACVc,QAAS,kBAAMkB,EAAiBF,IAFlC,SAIE,mBAAG9B,UAAU,sBAGfiC,GAAiB,qBAAKjC,UAAU,gBAAf,SAChBiC,SCiCQa,EA9DH,WAAO,IAAD,EACkBjB,mBAAS,IAD3B,mBACTb,EADS,KACE+B,EADF,OAEgBlB,mBAAS,CAAE5B,KAAM,YAAaC,QAAS,OAFvD,mBAET8C,EAFS,KAECC,EAFD,OAGwBpB,mBAAS,GAHjC,mBAGTqB,EAHS,KAGKC,EAHL,OAIwBtB,mBAAS,IAJjC,mBAITI,EAJS,KAIKmB,EAJL,KAMVC,EAAY,uCAAG,WAAOpD,GAAP,SAAAqD,EAAA,sEACbC,IAAMC,IAAN,gEAAmEvD,IACxEwD,MAAK,SAAAC,GACe,MAAfA,EAAIC,SACNV,EAAYS,EAAIE,KAAKZ,UACrBD,EAAaW,EAAIE,KAAK5C,WACtBoC,EAAgB,QAGnBS,OAAM,SAACC,GACwB,MAA1BA,EAAMC,SAASJ,OACjBP,EAAgB,UAAD,OAAWnD,EAAX,kDACoB,MAA1B6D,EAAMC,SAASJ,QACxBP,EAAgB,0DAbD,2CAAH,sDAkBlBY,qBAAW,WACTX,EAAaL,EAAS/C,QACrB,CAAC+C,EAAS/C,OAEb,IAAMgE,EAAmBjD,EAAUkD,MAAK,SAAAhD,GAAQ,OAC9CA,EAASd,OAAS8C,KAWpB,OAAO,sBAAKlD,UAAU,WAAf,UACL,sBAAKA,UAAU,2BAAf,UACE,cAAC,EAAD,CACEC,KAAM+C,EAAS/C,KACfC,QAAS8C,EAAS9C,UAEpB,cAAC,EAAD,CACE8B,iBAZmB,SAACF,GACxBuB,EAAavB,IAYTG,aAAcA,OAGlB,cAAC,EAAD,CACEjB,UAAWA,EACXI,iBAtByB,SAAChB,GAC5B+C,EAAgB/C,MAwBd6D,GAAqB,cAAC,EAAD,CAAiB/C,SAAU+C,Q,MC1DtDE,IAASC,OACP,cAAC,EAAD,IACAxB,SAASC,eAAe,W","file":"static/js/main.757a0166.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/location-details.css'\n\nconst LocationDetails = props => {\n  return <h1 className=\"location-details\">\n    {props.city}, {props.country}\n  </h1>\n};\n\nLocationDetails.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n};\n\nexport default LocationDetails;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherIcon from 'react-icons-weather';\nimport moment from 'moment';\nimport '../styles/forecast-summary.css'\n\nconst ForecastSummary = ({\n  date,\n  temperature,\n  description,\n  icon,\n  onSelect,\n}) => {\n  return (\n    <div className=\"forecast-summary\">\n      <span className=\"date\" data-testid=\"date-id\">\n        {moment(date).format(\"ddd Do MMM\")}\n      </span>\n      <span className=\"temperature\" data-testid=\"temperature-id\">\n        {temperature}&deg;c\n      </span>\n      <span className=\"description\" data-testid=\"description-id\">\n        {description}\n      </span>\n      <span className=\"icon\" data-testid=\"icon-id\">\n        <WeatherIcon name=\"owm\" iconId={icon} data-testid=\"weather-icon-id\"/>\n      </span>\n      <button className=\"details-button\" onClick={() => onSelect(date)}>\n        More Details\n      </button>\n    </div>\n  );\n};\n\nForecastSummary.propTypes = {\n  date: PropTypes.number.isRequired,\n  icon: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  temperature: PropTypes.number.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n\nexport default ForecastSummary;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport ForecastSummary from './forecast-summary';\nimport '../styles/forecast-summaries.css';\n\nconst ForecastSummaries = props => (\n  <div className=\"forecast-summaries\">\n    {\n      props.forecasts.map(forecast => (\n        <ForecastSummary\n          key={forecast.date}\n          date={forecast.date}\n          description={forecast.description}\n          icon={forecast.icon}\n          temperature={forecast.temperature.max}\n          onSelect={props.onForecastSelect}\n        />\n      ))\n    }\n\n  </div>\n);\n\nForecastSummaries.propTypes = {\n  forecasts: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.number,\n      icon: PropTypes.string,\n      description: PropTypes.string,\n      temperature: PropTypes.object,\n    }).isRequired\n  ),\n  onForecastSelect: PropTypes.func.isRequired,\n};\n\nexport default ForecastSummaries;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport '../styles/forecast-details.css';\n\nconst ForecastDetails = ({ forecast }) => {\n  return <div className=\"forecast-details\">\n    <span className=\"date\" data-testid=\"date-id\">\n      {moment(forecast.date).format(\"ddd Do MMM\")}\n    </span>\n    <span className=\"min-temperature\" data-testid=\"min-temperature-id\">\n      Min temp: {forecast.temperature.min}&deg;c\n    </span>\n    <span className=\"max-temperature\" data-testid=\"max-temperature-id\">\n      Max temp: {forecast.temperature.max}&deg;c\n    </span>\n    <span className=\"humidity\" data-testid=\"humidity-id\">\n      Humidity: {forecast.humidity}%\n    </span>\n    <span className=\"wind-speed\" data-testid=\"wind-speed-id\">\n      Wind speed: {forecast.wind.speed}mph\n    </span>\n    <span className=\"wind-direction\" data-testid=\"wind-direction-id\">\n      Wind direction: {forecast.wind.direction.toUpperCase()}\n    </span>\n  </div>\n};\n\nForecastDetails.propTypes = ({\n    date: PropTypes.number,\n    temperature: PropTypes.shape({\n      max: PropTypes.number,\n      min: PropTypes.number\n    }),\n    wind: PropTypes.shape({\n      speed: PropTypes.number,\n      direction: PropTypes.string\n    }),\n    humidity: PropTypes.number,\n  }).isRequired;\n\nexport default ForecastDetails;","import {useState, React} from 'react';\nimport '../styles/search-form.css';\n\nconst SearchForm = (props) => {\n  const [searchText, setSearchText] = useState(\"\");\n  const handleInputChange = (event) => {\n    setSearchText(event.target.value);\n  }\n  const {handleSearchText, errorMessage} = props;\n\n  return <div className=\"search-form\">\n    <div id=\"search-input-wrapper\">\n      <input \n        className=\"search-input\"\n        id=\"location-search-input\"\n        type=\"search\"\n        placeholder=\"Find a city\"\n        onChange={(event) => {\n          handleInputChange(event);\n        }}\n        onKeyUp={(event) => {\n          if (event.key === \"Enter\") {\n            handleSearchText(searchText);\n            document.getElementById(\"location-search-input\").value = \"\";\n          }\n        }}\n      >\n      </input>\n\n      <button \n        className=\"search-button\"\n        onClick={() => handleSearchText(searchText)}\n      >\n        <i className=\"fa fa-search\"></i>\n      </button>\n    </div>\n    { errorMessage && (<div className=\"error-message\">\n      {errorMessage}\n    </div>)}\n  </div>\n}\n\nexport default SearchForm;","import '../styles/App.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport LocationDetails from './location-details';\nimport ForecastSummaries from './forecast-summaries';\nimport ForecastDetails from './forecast-details';\nimport SearchForm from './search-form';\n\nconst App = () => {\n  const [forecasts, setForecasts] = useState([]);\n  const [location, setLocation] = useState({ city: 'Edinburgh', country: 'GB' });\n  const [selectedDate, setSelectedDate] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const getForecasts = async (city) => {\n    await axios.get(`https://mcr-codes-weather.herokuapp.com/forecast?city=${city}`)\n    .then(res => {\n      if (res.status === 200) {\n        setLocation(res.data.location);\n        setForecasts(res.data.forecasts);\n        setErrorMessage(\"\");\n      }\n    })\n    .catch((error) => {\n      if (error.response.status === 404) {\n        setErrorMessage(`Sorry, ${city} isn't available. Please choose another city.`)\n      } else if (error.response.status === 500) {\n        setErrorMessage(\"Oops! Something went wrong. Please try again later.\")\n      }\n    })\n  }\n  \n  useEffect( () => {\n    getForecasts(location.city)\n  }, [location.city]);\n\n  const selectedForecast = forecasts.find(forecast => \n    forecast.date === selectedDate);\n  \n  const handleForecastSelect = (date) => {\n    setSelectedDate(date);\n  }\n\n  const handleSearchText = (searchText) => {\n    getForecasts(searchText);\n  };\n  \n\n  return <div className=\"forecast\">\n    <div className=\"location-details-wrapper\">\n      <LocationDetails \n        city={location.city} \n        country={location.country}\n      />\n      <SearchForm\n        handleSearchText={handleSearchText}\n        errorMessage={errorMessage}\n      />\n    </div>\n    <ForecastSummaries \n      forecasts={forecasts}\n      onForecastSelect={handleForecastSelect}\n    />\n    {\n      selectedForecast && (<ForecastDetails forecast={selectedForecast} /> )\n    }\n    \n  </div>\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}