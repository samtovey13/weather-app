{"version":3,"sources":["components/location-details.js","components/forecast-summary.js","components/forecast-summaries.js","components/forecast-details.js","components/search-form.js","components/App.js","index.js"],"names":["LocationDetails","props","className","city","country","ForecastSummary","date","temperature","description","icon","onSelect","handleShowDetails","data-testid","moment","format","name","iconId","onClick","detailsDate","document","getElementById","parseInt","getAttribute","clickFunction","ForecastSummaries","forecasts","map","forecast","max","onForecastSelect","ForecastDetails","id","value","min","humidity","wind","speed","direction","toUpperCase","SearchForm","useState","searchText","setSearchText","handleSearchText","errorMessage","type","placeholder","onChange","event","target","handleInputChange","onKeyUp","key","App","setForecasts","location","setLocation","selectedDate","setSelectedDate","setErrorMessage","showDetails","setShowDetails","getForecasts","a","axios","get","then","res","status","data","catch","error","response","useEffect","selectedForecast","find","b","ReactDOM","render"],"mappings":"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","file":"static/js/main.ccecacc6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/location-details.css'\n\nconst LocationDetails = props => {\n  return <h1 className=\"location-details\">\n    {props.city}, {props.country}\n  </h1>\n};\n\nLocationDetails.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n};\n\nexport default LocationDetails;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherIcon from 'react-icons-weather';\nimport moment from 'moment';\nimport '../styles/forecast-summary.css'\n\nconst ForecastSummary = ({\n  date,\n  temperature,\n  description,\n  icon,\n  onSelect,\n  handleShowDetails,\n}) => {\n  const clickFunction = (date) => {\n    const detailsDate = document.getElementById(\"forecast-details-date\");\n    if (detailsDate && (parseInt(detailsDate.getAttribute(\"value\")) === date)) {\n      handleShowDetails(false);\n    } else {\n      onSelect(date);\n      handleShowDetails(true);\n    }\n  }\n\n  return (\n    <div className=\"forecast-summary\">\n      <span className=\"date\" data-testid=\"date-id\" >\n        {moment(date).format(\"ddd Do MMM\")}\n      </span>\n      <span className=\"temperature\" data-testid=\"temperature-id\">\n        {temperature}&deg;c\n      </span>\n      <span className=\"description\" data-testid=\"description-id\">\n        {description}\n      </span>\n      <span className=\"icon\" data-testid=\"icon-id\">\n        <WeatherIcon name=\"owm\" iconId={icon} data-testid=\"weather-icon-id\"/>\n      </span>\n      <button className=\"details-button\" onClick={() => {clickFunction(date)}}>\n        More Details\n      </button>\n    </div>\n  );\n};\n\nForecastSummary.propTypes = {\n  date: PropTypes.number.isRequired,\n  icon: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  temperature: PropTypes.number.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  handleShowDetails: PropTypes.func.isRequired,\n};\n\nexport default ForecastSummary;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport ForecastSummary from './forecast-summary';\nimport '../styles/forecast-summaries.css';\n\nconst ForecastSummaries = props => (\n  <div className=\"forecast-summaries\">\n    {\n      props.forecasts.map(forecast => (\n        <ForecastSummary\n          key={forecast.date}\n          date={forecast.date}\n          description={forecast.description}\n          icon={forecast.icon}\n          temperature={forecast.temperature.max}\n          onSelect={props.onForecastSelect}\n          handleShowDetails={props.handleShowDetails}\n        />\n      ))\n    }\n\n  </div>\n);\n\nForecastSummaries.propTypes = {\n  forecasts: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.number,\n      icon: PropTypes.string,\n      description: PropTypes.string,\n      temperature: PropTypes.object,\n    }).isRequired\n  ),\n  onForecastSelect: PropTypes.func.isRequired,\n  handleShowDetails: PropTypes.func.isRequired\n};\n\nexport default ForecastSummaries;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport '../styles/forecast-details.css';\n\nconst ForecastDetails = ({ forecast }) => {\n  return <div className=\"forecast-details\">\n    <span className=\"date\" data-testid=\"date-id\" id=\"forecast-details-date\" value={forecast.date}>\n      {moment(forecast.date).format(\"ddd Do MMM\")}\n    </span>\n    <span className=\"min-temperature\" data-testid=\"min-temperature-id\">\n      Min temp: {forecast.temperature.min}&deg;c\n    </span>\n    <span className=\"max-temperature\" data-testid=\"max-temperature-id\">\n      Max temp: {forecast.temperature.max}&deg;c\n    </span>\n    <span className=\"humidity\" data-testid=\"humidity-id\">\n      Humidity: {forecast.humidity}%\n    </span>\n    <span className=\"wind-speed\" data-testid=\"wind-speed-id\">\n      Wind speed: {forecast.wind.speed}mph\n    </span>\n    <span className=\"wind-direction\" data-testid=\"wind-direction-id\">\n      Wind direction: {forecast.wind.direction.toUpperCase()}\n    </span>\n  </div>\n};\n\nForecastDetails.propTypes = ({\n    date: PropTypes.number,\n    temperature: PropTypes.shape({\n      max: PropTypes.number,\n      min: PropTypes.number\n    }),\n    wind: PropTypes.shape({\n      speed: PropTypes.number,\n      direction: PropTypes.string\n    }),\n    humidity: PropTypes.number,\n  }).isRequired;\n\nexport default ForecastDetails;","import {useState, React} from 'react';\nimport '../styles/search-form.css';\n\nconst SearchForm = (props) => {\n  const [searchText, setSearchText] = useState(\"\");\n  const handleInputChange = (event) => {\n    setSearchText(event.target.value);\n  }\n  const {handleSearchText, errorMessage} = props;\n\n  return <div className=\"search-form\">\n    <div id=\"search-input-wrapper\">\n      <input \n        className=\"search-input\"\n        id=\"location-search-input\"\n        type=\"search\"\n        placeholder=\"Find a city\"\n        onChange={(event) => {\n          handleInputChange(event);\n        }}\n        onKeyUp={(event) => {\n          if (event.key === \"Enter\") {\n            handleSearchText(searchText);\n            document.getElementById(\"location-search-input\").value = \"\";\n          }\n        }}\n      >\n      </input>\n\n      <button \n        className=\"search-button\"\n        onClick={() => handleSearchText(searchText)}\n      >\n        <i className=\"fa fa-search\"></i>\n      </button>\n    </div>\n    { errorMessage && (<div className=\"error-message\">\n      {errorMessage}\n    </div>)}\n  </div>\n}\n\nexport default SearchForm;","import '../styles/App.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport LocationDetails from './location-details';\nimport ForecastSummaries from './forecast-summaries';\nimport ForecastDetails from './forecast-details';\nimport SearchForm from './search-form';\n\nconst App = () => {\n  const [forecasts, setForecasts] = useState([]);\n  const [location, setLocation] = useState({ city: 'Edinburgh', country: 'GB' });\n  const [selectedDate, setSelectedDate] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDetails, setShowDetails] = useState(false);\n\n  const getForecasts = async (city) => {\n    await axios.get(`https://mcr-codes-weather.herokuapp.com/forecast?city=${city}`)\n    .then(res => {\n      if (res.status === 200) {\n        setLocation(res.data.location);\n        setForecasts(res.data.forecasts);\n        setErrorMessage(\"\");\n      }\n    })\n    .catch((error) => {\n      if (error.response.status === 404) {\n        setErrorMessage(`Sorry, ${city} isn't available. Please choose another city.`)\n      } else if (error.response.status === 500) {\n        setErrorMessage(\"Oops! Something went wrong. Please try again later.\")\n      }\n    })\n  }\n  \n  useEffect( () => {\n    getForecasts(location.city)\n  }, [location.city]);\n\n  const selectedForecast = forecasts.find(forecast => \n    forecast.date === selectedDate);\n  \n  const handleForecastSelect = (date) => {\n    setSelectedDate(date);\n  }\n\n  const handleShowDetails = (b) => {\n    setShowDetails(b);\n  }\n\n  const handleSearchText = (searchText) => {\n    getForecasts(searchText);\n  };\n\n  return <div className=\"forecast\">\n    {\n      forecasts[0] && (<div className=\"location-details-wrapper\">\n        <LocationDetails \n          city={location.city} \n          country={location.country}\n        />\n        <SearchForm\n          handleSearchText={handleSearchText}\n          errorMessage={errorMessage}\n        />\n      </div>\n      )\n    }\n    {\n      forecasts[0] && (<ForecastSummaries \n      forecasts={forecasts}\n      onForecastSelect={handleForecastSelect}\n      handleShowDetails={handleShowDetails}\n    />\n      )\n    }\n        \n    {\n      selectedForecast && showDetails && (<ForecastDetails \n        forecast={selectedForecast}\n        /> )\n    }\n    \n  </div>\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}